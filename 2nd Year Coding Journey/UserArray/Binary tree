  import java.util.Scanner;

class Node {
    int key;
    Node left, right;

    Node(int key) {
        this.key = key;
        left = right = null;
    }
}

class BinaryTree {
    Node root;

    BinaryTree() {
        root = null;
    }

    BinaryTree(int key) {
        root = new Node(key);
    }

    BinaryTree insert(int key) {
        if (root == null)
            root = new Node(key);
        else
            insert(root, key);

        return this;
    }

    void insert(Node node, int key) {
        if (key < node.key) {
            if (node.left == null)
                node.left = new Node(key);
            else {
                insert(node.left, key);
            }
        } else if (key > node.key) {
            if (node.right == null)
                node.right = new Node(key);
            else {
                insert(node.right, key);
            }
        }
    }

    void inOrder(Node node) {
        if (node != null) {
            inOrder(node.left);
            System.out.print(node.key + " ");
            inOrder(node.right);
        }
    }

    void postOrder(Node node) {
        if (node != null) {
            postOrder(node.left);
            postOrder(node.right);
            System.out.print(node.key + " ");
        }
    }

    void preOrder(Node node) {
        if (node != null) {
            System.out.print(node.key + " ");
            preOrder(node.left);
            preOrder(node.right);
        }
    }

    Node search(Node root, int key) {
        if (root == null || root.key == key)
            return root;

        if (key < root.key)
            return search(root.left, key);

        return search(root.right, key);
    }

    Node delete(Node root, int key) {
        if (root == null)
            return root;

        if (key < root.key)
            root.left = delete(root.left, key);
        else if (key > root.key)
            root.right = delete(root.right, key);
        else {
            if (root.left == null)
                return root.right;
            else if (root.right == null)
                return root.left;

            root.key = minValue(root.right);
            root.right = delete(root.right, root.key);
        }

        return root;
    }

    int minValue(Node root) {
        int minValue = root.key;
        while (root.left != null) {
            minValue = root.left.key;
            root = root.left;
        }
        return minValue;
    }

    void delete(int key) {
        root = delete(root, key);
    }

    void traversals(int choice) {
        switch (choice) {
            case 1:
                System.out.print("Inorder Traversal: ");
                inOrder(root);
                break;
            case 2:
                System.out.print("Preorder Traversal: ");
                preOrder(root);
                break;
            case 3:
                System.out.print("Postorder Traversal: ");
                postOrder(root);
                break;
            
        }
        System.out.println(); // Add a new line for better formatting
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

           boolean run = true;
        do {
            BinaryTree tree = new BinaryTree();

            boolean onRun = true;
            System.out.print("Enter root value: ");
            int rootValue = sc.nextInt();
            tree.insert(rootValue);

            do {
                System.out.print("Enter value (or -1 to stop): ");
                int val = sc.nextInt();
                if (val != -1)
                    tree.insert(val);
                else
                    onRun = false;
            } while (onRun);


        boolean goRun= true;
        do{
  
            System.out.println("Traversals");
            System.out.println(" 1) Inorder\n 2) Preorder\n 3) Postorder\n 4) Exit");
            int choice = sc.nextInt();
            tree.traversals(choice);
            
             goRun = choice == 4 ? false : true;
            
                         boolean onGo =  goRun == true ? true:false;
                    while(onGo){
                          // Offer insert, delete, search options after traversals
                        System.out.println("Choose operation:");
                        System.out.println("1) Insert\n2) Delete\n3) Search\n4) Back");
                        int operationChoice = sc.nextInt();
                        
                        switch (operationChoice) {
                            case 1:
                                System.out.print("Enter value to insert: ");
                                int insertValue = sc.nextInt();
                                tree.insert(insertValue);
                               
                                break;
                            case 2:
                                System.out.print("Enter value to delete: ");
                                int deleteValue = sc.nextInt();
                                tree.delete(deleteValue);
                                break;
                            case 3:
                                System.out.print("Enter value to search: ");
                                int searchValue = sc.nextInt();
                                Node result = tree.search(tree.root, searchValue);
                                if (result != null) {
                                    System.out.println("Value found in the tree.");
                                } else {
                                    System.out.println("Value not found in the tree.");
                                }
                                break;
                            case 4:
                                 onGo = false;
                                 break;
                            default:
                                System.out.println("Invalid choice!");
                        }
                        
                        if(onGo){
                         System.out.println("\nTree after operation:");
                        tree.traversals(choice);
                        System.out.println();
                        }
                        
                       };
            
            
        }while(goRun);
           
          




            // Display the tree after the operation

            System.out.println("Do you want to run again? (Y/N)");
            sc.nextLine(); // Consume the newline
            run = sc.nextLine().equalsIgnoreCase("Y");
        } while (run);
    }
}
